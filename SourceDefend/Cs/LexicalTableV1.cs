using System;
using System.Collections.Generic;
using System.Text;

namespace CodeConvert.SourceDefend.Cs
{
    partial class LexicalTable
    {

        private Dictionary<string, CodeTypeCs> v1 = new Dictionary<string, CodeTypeCs>()
        {
            // 界符
            { "@", CodeTypeCs.T_BOUND_AT},
            { "$", CodeTypeCs.T_BOUND_DOLLAR},
            { ".", CodeTypeCs.T_BOUND_PERIOD},
            { "[", CodeTypeCs.T_BOUND_BRACKETLEFT},
            { "]", CodeTypeCs.T_BOUND_BRACKETRIGHT},
            { "(", CodeTypeCs.T_BOUND_PARENTLEFT},
            { ")", CodeTypeCs.T_BOUND_PARENTRUGHT},
            { "{", CodeTypeCs.T_BOUND_BRACELEFT},
            { "}", CodeTypeCs.T_BOUND_BRACERIGHT},
            { ";", CodeTypeCs.T_BOUND_SEMICOLON},
            { ",", CodeTypeCs.T_BOUND_QUOTE},
            { "\\", CodeTypeCs.T_BOUND_BACKSLASH},
            { "//", CodeTypeCs.T_BOUND_DOUBLESLASH},
            { "/*", CodeTypeCs.T_BOUND_SLASHSTAR},
            { "*/", CodeTypeCs.T_BOUND_STARSLASH},
            { "::", CodeTypeCs.T_BOUND_EQUALS},
            { "=>", CodeTypeCs.T_BOUND_ARROW},
            { "->", CodeTypeCs.T_BOUND_POINTER},
            { "..", CodeTypeCs.T_BOUND_ELLIPSIS},
            { "///", CodeTypeCs.T_BOUND_HTREESLASH},

            // 操作符
            {  "?",  CodeTypeCs.T_OPERATION_QUESTION},
            {  ":",  CodeTypeCs.T_OPERATION_COLON},
            {  "=",  CodeTypeCs.T_OPERATION_EQUAL},
            {  "&",  CodeTypeCs.T_OPERATION_AND},
            {  "*",  CodeTypeCs.T_OPERATION_STAR},
            {  "+",  CodeTypeCs.T_OPERATION_PLUS},
            {  "-",  CodeTypeCs.T_OPERATION_MINUS},
            {  "/",  CodeTypeCs.T_OPERATION_SLASH},
            {  "%",  CodeTypeCs.T_OPERATION_PERCENT},
            {  ">",  CodeTypeCs.T_OPERATION_GREATER},
            {  "<",  CodeTypeCs.T_OPERATION_LESS},
            {  "^",  CodeTypeCs.T_OPERATION_CARET},
            {  "~",  CodeTypeCs.T_OPERATION_TILDE},
            {  "|",  CodeTypeCs.T_OPERATION_BAR},
            {  "!",  CodeTypeCs.T_OPERATION_EXCLAM},
            {  "??",  CodeTypeCs.T_OPERATION_DOUBLEQUESTION},
            {  "-=",  CodeTypeCs.T_OPERATION_MINUSEQUAL},
            {  "+=",  CodeTypeCs.T_OPERATION_PLUSEQUAL},
            {  "++",  CodeTypeCs.T_OPERATION_DOUBLEPLUS},
            {  "--",  CodeTypeCs.T_OPERATION_DOUBLEMINUS},
            {  "==",  CodeTypeCs.T_OPERATION_DOUBLEEQUAL},
            {  "!=",  CodeTypeCs.T_OPERATION_EXCLAMEQUAL},
            {  ">=",  CodeTypeCs.T_OPERATION_GREATEREQUAL},
            {  "<=",  CodeTypeCs.T_OPERATION_LESSEQUAL},
            {  ">>",  CodeTypeCs.T_OPERATION_DOUBLEGREATER},
            {  "<<",  CodeTypeCs.T_OPERATION_DOUBLELESS},
            {  "||",  CodeTypeCs.T_OPERATION_DOUBLEBAR},
            {  "&&",  CodeTypeCs.T_OPERATION_DOUBLEAND},
            {  "??=",  CodeTypeCs.T_OPERATION_DOUBLEQUESTIONEQUAL},

            // 保留字
            { "abstract", CodeTypeCs.T_PERSIST_ABSTRACT},
            { "as", CodeTypeCs.T_PERSIST_AS},
            { "base", CodeTypeCs.T_PERSIST_BASE},
            { "bool", CodeTypeCs.T_PERSIST_BOOL},
            { "break", CodeTypeCs.T_PERSIST_BREAK},
            { "byte", CodeTypeCs.T_PERSIST_BYTE},
            { "case", CodeTypeCs.T_PERSIST_CASE},
            { "catch", CodeTypeCs.T_PERSIST_CATCH},
            { "char", CodeTypeCs.T_PERSIST_CHAR},
            { "checked", CodeTypeCs.T_PERSIST_CHECKED},
            { "class", CodeTypeCs.T_PERSIST_CLASS},
            { "const", CodeTypeCs.T_PERSIST_CONST},
            { "continue", CodeTypeCs.T_PERSIST_CONTINUE},
            { "decimal", CodeTypeCs.T_PERSIST_DECIMAL},
            { "default", CodeTypeCs.T_PERSIST_DEFAULT},
            { "delegate", CodeTypeCs.T_PERSIST_DELEGATE},
            { "do", CodeTypeCs.T_PERSIST_DO},
            { "double", CodeTypeCs.T_PERSIST_DOUBLE},
            { "else", CodeTypeCs.T_PERSIST_ELSE},
            { "enum", CodeTypeCs.T_PERSIST_ENUM},
            { "event", CodeTypeCs.T_PERSIST_EVENT},
            { "explicit", CodeTypeCs.T_PERSIST_EXPLICIT},
            { "extern", CodeTypeCs.T_PERSIST_EXTERN},
            { "false", CodeTypeCs.T_PERSIST_FALSE},
            { "finally", CodeTypeCs.T_PERSIST_FINALLY},
            { "fixed", CodeTypeCs.T_PERSIST_FIXED},
            { "float", CodeTypeCs.T_PERSIST_FLOAT},
            { "for", CodeTypeCs.T_PERSIST_FOR},
            { "foreach", CodeTypeCs.T_PERSIST_FOREACH},
            { "goto", CodeTypeCs.T_PERSIST_GOTO},
            { "if", CodeTypeCs.T_PERSIST_IF},
            { "implicit", CodeTypeCs.T_PERSIST_IMPLICIT},
            { "in", CodeTypeCs.T_PERSIST_IN},
            { "int", CodeTypeCs.T_PERSIST_INT},
            { "interface", CodeTypeCs.T_PERSIST_INTERFACE},
            { "internal", CodeTypeCs.T_PERSIST_INTERNAL},
            { "is", CodeTypeCs.T_PERSIST_IS},
            { "lock", CodeTypeCs.T_PERSIST_LOCK},
            { "long", CodeTypeCs.T_PERSIST_LONG},
            { "namespace", CodeTypeCs.T_PERSIST_NAMESPACE},
            { "new", CodeTypeCs.T_PERSIST_NEW},
            { "null", CodeTypeCs.T_PERSIST_NULL},
            { "object", CodeTypeCs.T_PERSIST_OBJECT},
            { "operator", CodeTypeCs.T_PERSIST_OPERATOR},
            { "out", CodeTypeCs.T_PERSIST_OUT},
            { "override", CodeTypeCs.T_PERSIST_OVERRIDE},
            { "params", CodeTypeCs.T_PERSIST_PARAMS},
            { "private", CodeTypeCs.T_PERSIST_PRIVATE},
            { "protected", CodeTypeCs.T_PERSIST_PROTECTED},
            { "public", CodeTypeCs.T_PERSIST_PUBLIC},
            { "readonly", CodeTypeCs.T_PERSIST_READONLY},
            { "ref", CodeTypeCs.T_PERSIST_REF},
            { "return", CodeTypeCs.T_PERSIST_RETURN},
            { "sbyte", CodeTypeCs.T_PERSIST_SBYTE},
            { "sealed", CodeTypeCs.T_PERSIST_SEALED},
            { "short", CodeTypeCs.T_PERSIST_SHORT},
            { "sizeof", CodeTypeCs.T_PERSIST_SIZEOF},
            { "stackalloc", CodeTypeCs.T_PERSIST_STACKALLOC},
            { "static", CodeTypeCs.T_PERSIST_STATIC},
            { "string", CodeTypeCs.T_PERSIST_STRING},
            { "struct", CodeTypeCs.T_PERSIST_STRUCT},
            { "switch", CodeTypeCs.T_PERSIST_SWITCH},
            { "this", CodeTypeCs.T_PERSIST_THIS},
            { "throw", CodeTypeCs.T_PERSIST_THROW},
            { "true", CodeTypeCs.T_PERSIST_TRUE},
            { "try", CodeTypeCs.T_PERSIST_TRY},
            { "typeof", CodeTypeCs.T_PERSIST_TYPEOF},
            { "uint", CodeTypeCs.T_PERSIST_UINT},
            { "ulong", CodeTypeCs.T_PERSIST_ULONG},
            { "unchecked", CodeTypeCs.T_PERSIST_UNCHECKED},
            { "unsafe", CodeTypeCs.T_PERSIST_UNSAFE},
            { "ushort", CodeTypeCs.T_PERSIST_USHORT},
            { "using", CodeTypeCs.T_PERSIST_USING},
            { "virtual", CodeTypeCs.T_PERSIST_VIRTUAL},
            { "void", CodeTypeCs.T_PERSIST_VOID},
            { "volatile", CodeTypeCs.T_PERSIST_VOLATILE},
            { "while", CodeTypeCs.T_PERSIST_WHILE},
            { "add", CodeTypeCs.T_PERSIST_ADD},
            { "alias", CodeTypeCs.T_PERSIST_ALIAS},
            { "ascending", CodeTypeCs.T_PERSIST_ASCENDING},
            { "async", CodeTypeCs.T_PERSIST_ASYNC},
            { "await", CodeTypeCs.T_PERSIST_AWAIT},
            { "by", CodeTypeCs.T_PERSIST_BY},
            { "descending", CodeTypeCs.T_PERSIST_DESCENDING},
            { "dynamic", CodeTypeCs.T_PERSIST_DYNAMIC},
            { "equals", CodeTypeCs.T_PERSIST_EQUALS},
            { "from", CodeTypeCs.T_PERSIST_FROM},
            { "get", CodeTypeCs.T_PERSIST_GET},
            { "global", CodeTypeCs.T_PERSIST_GLOBAL},
            { "group", CodeTypeCs.T_PERSIST_GROUP},
            { "into", CodeTypeCs.T_PERSIST_INTO},
            { "join", CodeTypeCs.T_PERSIST_JOIN},
            { "let", CodeTypeCs.T_PERSIST_LET},
            { "nameof", CodeTypeCs.T_PERSIST_NAMEOF},
            { "notnull", CodeTypeCs.T_PERSIST_NOTNULL},
            { "on", CodeTypeCs.T_PERSIST_ON},
            { "orderby", CodeTypeCs.T_PERSIST_ORDERBY},
            { "partial", CodeTypeCs.T_PERSIST_PARTIAL},
            { "remove", CodeTypeCs.T_PERSIST_REMOVE},
            { "select", CodeTypeCs.T_PERSIST_SELECT},
            { "set", CodeTypeCs.T_PERSIST_SET},
            { "unmanaged", CodeTypeCs.T_PERSIST_UNMANAGED},
            { "value", CodeTypeCs.T_PERSIST_VALUE},
            { "var", CodeTypeCs.T_PERSIST_VAR},
            { "when", CodeTypeCs.T_PERSIST_WHEN},
            { "where", CodeTypeCs.T_PERSIST_WHERE},
            { "with", CodeTypeCs.T_PERSIST_WITH},
            { "yield", CodeTypeCs.T_PERSIST_YIELD},

            // 预处理
            { "#if", CodeTypeCs.T_SHARP_IF},
            { "#else", CodeTypeCs.T_SHARP_ELSE},
            { "#elif", CodeTypeCs.T_SHARP_ELIF},
            { "#endif", CodeTypeCs.T_SHARP_ENDIF},
            { "#define", CodeTypeCs.T_SHARP_DEFINE},
            { "#undef", CodeTypeCs.T_SHARP_UNDEF},
            { "#warning", CodeTypeCs.T_SHARP_WARNING},
            { "#error", CodeTypeCs.T_SHARP_ERROR},
            { "#line", CodeTypeCs.T_SHARP_LINE},
            { "#nullable", CodeTypeCs.T_SHARP_NULLABLE},
            { "#region", CodeTypeCs.T_SHARP_REGION},
            { "#endregion", CodeTypeCs.T_SHARP_ENDREGION},
            { "#pragma", CodeTypeCs.T_SHARP_PRAGMA},
            { "#pragma warning", CodeTypeCs.T_SHARP_PRAGMAWARNING},
            { "#pragma checksum", CodeTypeCs.T_SHARP_PRAGMACHECKSUM},

        };

    }
}
