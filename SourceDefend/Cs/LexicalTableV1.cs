using CodeConvert.Constant;
using System;
using System.Collections.Generic;
using System.Text;

namespace CodeConvert.SourceDefend.Cs
{
    partial class LexicalTable
    {

        private Dictionary<string, CodeType> v1 = new Dictionary<string, CodeType>()
        {
            // 界符
            { "@", CodeType.T_BOUND_AT},
            { "$", CodeType.T_BOUND_DOLLAR},
            { ".", CodeType.T_BOUND_PERIOD},
            { "[", CodeType.T_BOUND_BRACKETLEFT},
            { "]", CodeType.T_BOUND_BRACKETRIGHT},
            { "(", CodeType.T_BOUND_PARENTLEFT},
            { ")", CodeType.T_BOUND_PARENTRUGHT},
            { "{", CodeType.T_BOUND_BRACELEFT},
            { "}", CodeType.T_BOUND_BRACERIGHT},
            { ";", CodeType.T_BOUND_SEMICOLON},
            { ",", CodeType.T_BOUND_QUOTE},
            { "\\", CodeType.T_BOUND_BACKSLASH},
            { "//", CodeType.T_BOUND_DOUBLESLASH},
            { "/*", CodeType.T_BOUND_SLASHSTAR},
            { "*/", CodeType.T_BOUND_STARSLASH},
            { "::", CodeType.T_BOUND_EQUALS},
            { "=>", CodeType.T_BOUND_ARROW},
            { "->", CodeType.T_BOUND_POINTER},
            { "..", CodeType.T_BOUND_ELLIPSIS},
            { "///", CodeType.T_BOUND_HTREESLASH},

            // 操作符
            {  "?",  CodeType.T_OPERATION_QUESTION},
            {  ":",  CodeType.T_OPERATION_COLON},
            {  "=",  CodeType.T_OPERATION_EQUAL},
            {  "&",  CodeType.T_OPERATION_AND},
            {  "*",  CodeType.T_OPERATION_STAR},
            {  "+",  CodeType.T_OPERATION_PLUS},
            {  "-",  CodeType.T_OPERATION_MINUS},
            {  "/",  CodeType.T_OPERATION_SLASH},
            {  "%",  CodeType.T_OPERATION_PERCENT},
            {  ">",  CodeType.T_OPERATION_GREATER},
            {  "<",  CodeType.T_OPERATION_LESS},
            {  "^",  CodeType.T_OPERATION_CARET},
            {  "~",  CodeType.T_OPERATION_TILDE},
            {  "|",  CodeType.T_OPERATION_BAR},
            {  "!",  CodeType.T_OPERATION_EXCLAM},
            {  "??",  CodeType.T_OPERATION_DOUBLEQUESTION},
            {  "-=",  CodeType.T_OPERATION_MINUSEQUAL},
            {  "+=",  CodeType.T_OPERATION_PLUSEQUAL},
            {  "++",  CodeType.T_OPERATION_DOUBLEPLUS},
            {  "--",  CodeType.T_OPERATION_DOUBLEMINUS},
            {  "==",  CodeType.T_OPERATION_DOUBLEEQUAL},
            {  "!=",  CodeType.T_OPERATION_EXCLAMEQUAL},
            {  ">=",  CodeType.T_OPERATION_GREATEREQUAL},
            {  "<=",  CodeType.T_OPERATION_LESSEQUAL},
            {  ">>",  CodeType.T_OPERATION_DOUBLEGREATER},
            {  "<<",  CodeType.T_OPERATION_DOUBLELESS},
            {  "||",  CodeType.T_OPERATION_DOUBLEBAR},
            {  "&&",  CodeType.T_OPERATION_DOUBLEAND},
            {  "??=",  CodeType.T_OPERATION_DOUBLEQUESTIONEQUAL},

            // 保留字
            { "abstract", CodeType.T_PERSIST_ABSTRACT},
            { "as", CodeType.T_PERSIST_AS},
            { "base", CodeType.T_PERSIST_BASE},
            { "bool", CodeType.T_PERSIST_BOOL},
            { "break", CodeType.T_PERSIST_BREAK},
            { "byte", CodeType.T_PERSIST_BYTE},
            { "case", CodeType.T_PERSIST_CASE},
            { "catch", CodeType.T_PERSIST_CATCH},
            { "char", CodeType.T_PERSIST_CHAR},
            { "checked", CodeType.T_PERSIST_CHECKED},
            { "class", CodeType.T_PERSIST_CLASS},
            { "const", CodeType.T_PERSIST_CONST},
            { "continue", CodeType.T_PERSIST_CONTINUE},
            { "decimal", CodeType.T_PERSIST_DECIMAL},
            { "default", CodeType.T_PERSIST_DEFAULT},
            { "delegate", CodeType.T_PERSIST_DELEGATE},
            { "do", CodeType.T_PERSIST_DO},
            { "double", CodeType.T_PERSIST_DOUBLE},
            { "else", CodeType.T_PERSIST_ELSE},
            { "enum", CodeType.T_PERSIST_ENUM},
            { "event", CodeType.T_PERSIST_EVENT},
            { "explicit", CodeType.T_PERSIST_EXPLICIT},
            { "extern", CodeType.T_PERSIST_EXTERN},
            { "false", CodeType.T_PERSIST_FALSE},
            { "finally", CodeType.T_PERSIST_FINALLY},
            { "fixed", CodeType.T_PERSIST_FIXED},
            { "float", CodeType.T_PERSIST_FLOAT},
            { "for", CodeType.T_PERSIST_FOR},
            { "foreach", CodeType.T_PERSIST_FOREACH},
            { "goto", CodeType.T_PERSIST_GOTO},
            { "if", CodeType.T_PERSIST_IF},
            { "implicit", CodeType.T_PERSIST_IMPLICIT},
            { "in", CodeType.T_PERSIST_IN},
            { "int", CodeType.T_PERSIST_INT},
            { "interface", CodeType.T_PERSIST_INTERFACE},
            { "internal", CodeType.T_PERSIST_INTERNAL},
            { "is", CodeType.T_PERSIST_IS},
            { "lock", CodeType.T_PERSIST_LOCK},
            { "long", CodeType.T_PERSIST_LONG},
            { "namespace", CodeType.T_PERSIST_NAMESPACE},
            { "new", CodeType.T_PERSIST_NEW},
            { "null", CodeType.T_PERSIST_NULL},
            { "object", CodeType.T_PERSIST_OBJECT},
            { "operator", CodeType.T_PERSIST_OPERATOR},
            { "out", CodeType.T_PERSIST_OUT},
            { "override", CodeType.T_PERSIST_OVERRIDE},
            { "params", CodeType.T_PERSIST_PARAMS},
            { "private", CodeType.T_PERSIST_PRIVATE},
            { "protected", CodeType.T_PERSIST_PROTECTED},
            { "public", CodeType.T_PERSIST_PUBLIC},
            { "readonly", CodeType.T_PERSIST_READONLY},
            { "ref", CodeType.T_PERSIST_REF},
            { "return", CodeType.T_PERSIST_RETURN},
            { "sbyte", CodeType.T_PERSIST_SBYTE},
            { "sealed", CodeType.T_PERSIST_SEALED},
            { "short", CodeType.T_PERSIST_SHORT},
            { "sizeof", CodeType.T_PERSIST_SIZEOF},
            { "stackalloc", CodeType.T_PERSIST_STACKALLOC},
            { "static", CodeType.T_PERSIST_STATIC},
            { "string", CodeType.T_PERSIST_STRING},
            { "struct", CodeType.T_PERSIST_STRUCT},
            { "switch", CodeType.T_PERSIST_SWITCH},
            { "this", CodeType.T_PERSIST_THIS},
            { "throw", CodeType.T_PERSIST_THROW},
            { "true", CodeType.T_PERSIST_TRUE},
            { "try", CodeType.T_PERSIST_TRY},
            { "typeof", CodeType.T_PERSIST_TYPEOF},
            { "uint", CodeType.T_PERSIST_UINT},
            { "ulong", CodeType.T_PERSIST_ULONG},
            { "unchecked", CodeType.T_PERSIST_UNCHECKED},
            { "unsafe", CodeType.T_PERSIST_UNSAFE},
            { "ushort", CodeType.T_PERSIST_USHORT},
            { "using", CodeType.T_PERSIST_USING},
            { "virtual", CodeType.T_PERSIST_VIRTUAL},
            { "void", CodeType.T_PERSIST_VOID},
            { "volatile", CodeType.T_PERSIST_VOLATILE},
            { "while", CodeType.T_PERSIST_WHILE},
            { "add", CodeType.T_PERSIST_ADD},
            { "alias", CodeType.T_PERSIST_ALIAS},
            { "ascending", CodeType.T_PERSIST_ASCENDING},
            { "async", CodeType.T_PERSIST_ASYNC},
            { "await", CodeType.T_PERSIST_AWAIT},
            { "by", CodeType.T_PERSIST_BY},
            { "descending", CodeType.T_PERSIST_DESCENDING},
            { "dynamic", CodeType.T_PERSIST_DYNAMIC},
            { "equals", CodeType.T_PERSIST_EQUALS},
            { "from", CodeType.T_PERSIST_FROM},
            { "get", CodeType.T_PERSIST_GET},
            { "global", CodeType.T_PERSIST_GLOBAL},
            { "group", CodeType.T_PERSIST_GROUP},
            { "into", CodeType.T_PERSIST_INTO},
            { "join", CodeType.T_PERSIST_JOIN},
            { "let", CodeType.T_PERSIST_LET},
            { "nameof", CodeType.T_PERSIST_NAMEOF},
            { "notnull", CodeType.T_PERSIST_NOTNULL},
            { "on", CodeType.T_PERSIST_ON},
            { "orderby", CodeType.T_PERSIST_ORDERBY},
            { "partial", CodeType.T_PERSIST_PARTIAL},
            { "remove", CodeType.T_PERSIST_REMOVE},
            { "select", CodeType.T_PERSIST_SELECT},
            { "set", CodeType.T_PERSIST_SET},
            { "unmanaged", CodeType.T_PERSIST_UNMANAGED},
            { "value", CodeType.T_PERSIST_VALUE},
            { "var", CodeType.T_PERSIST_VAR},
            { "when", CodeType.T_PERSIST_WHEN},
            { "where", CodeType.T_PERSIST_WHERE},
            { "with", CodeType.T_PERSIST_WITH},
            { "yield", CodeType.T_PERSIST_YIELD},

            // 预处理
            { "#if", CodeType.T_SHARP_IF},
            { "#else", CodeType.T_SHARP_ELSE},
            { "#elif", CodeType.T_SHARP_ELIF},
            { "#endif", CodeType.T_SHARP_ENDIF},
            { "#define", CodeType.T_SHARP_DEFINE},
            { "#undef", CodeType.T_SHARP_UNDEF},
            { "#warning", CodeType.T_SHARP_WARNING},
            { "#error", CodeType.T_SHARP_ERROR},
            { "#line", CodeType.T_SHARP_LINE},
            { "#nullable", CodeType.T_SHARP_NULLABLE},
            { "#region", CodeType.T_SHARP_REGION},
            { "#endregion", CodeType.T_SHARP_ENDREGION},
            { "#pragma", CodeType.T_SHARP_PRAGMA},
            { "#pragma warning", CodeType.T_SHARP_PRAGMAWARNING},
            { "#pragma checksum", CodeType.T_SHARP_PRAGMACHECKSUM},

        };

    }
}
